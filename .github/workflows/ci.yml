# =============================================================================
# LYVOXA CI PIPELINE - PROFESSIONAL ORDERED BUILD
# =============================================================================
# Strict ordering: CodeQL ‚Üí DCO ‚Üí Build/Test ‚Üí Performance
# Normal mode (push to main): All steps run
# Release mode (tag): CI runs first, then Release, then AUR
# Author: rezky_nightky

name: üîß CI Pipeline

on:
  push:
    branches: [main]  # Only main branch (single active branch)
    tags:
      - '**'  # Also run on tag pushes for release pipeline
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "build.rs"
      - ".cargo/**"
      - "build.sh"
      - "Makefile"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "build.rs"
      - ".cargo/**"
      - ".github/workflows/ci.yml"
  workflow_dispatch:
  workflow_call:  # Allow other workflows to call this

# Security: Explicit permissions (principle of least privilege)
permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SCCACHE_GHA_ENABLED: false

jobs:
  # =============================================================================
  # STEP 1: CODEQL SECURITY ANALYSIS
  # =============================================================================
  codeql:
    name: 1Ô∏è‚É£ CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # =============================================================================
  # STEP 2: DCO (DEVELOPER CERTIFICATE OF ORIGIN) CHECK
  # =============================================================================
  dco:
    name: 2Ô∏è‚É£ DCO Check
    runs-on: ubuntu-latest
    needs: codeql
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: DCO Check
        run: |
          echo "üîç Checking DCO (Developer Certificate of Origin)..."

          # Check if commits are signed off
          UNSIGNED=$(git log --format='%H %s' origin/main..HEAD | while read commit message; do
            if ! git log -1 --format='%B' $commit | grep -q 'Signed-off-by:'; then
              echo "‚ùå Missing sign-off: $commit - $message"
            fi
          done)

          if [ -z "$UNSIGNED" ]; then
            echo "‚úÖ All commits properly signed off"
          else
            echo "$UNSIGNED"
            echo ""
            echo "‚ö†Ô∏è  Some commits missing 'Signed-off-by' line"
            echo "‚ÑπÔ∏è  Use: git commit -s"
          fi
        continue-on-error: true

  # =============================================================================
  # STEP 3: SECURITY & QUALITY CHECKS
  # =============================================================================
  security:
    name: 3Ô∏è‚É£ Security & Quality
    runs-on: ubuntu-latest
    needs: dco
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup sccache (optional)
        uses: mozilla-actions/sccache-action@v0.0.9
        continue-on-error: true
        with:
          version: "v0.5.4"

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Update dependencies
        run: |
          echo "üì¶ Updating dependencies..."
          cargo update
          echo "‚úÖ Dependencies updated"

      - name: Run code formatting check
        run: cargo fmt --check

      - name: Run Clippy
        run: |
          unset RUSTC_WRAPPER
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Install cargo-audit
        run: |
          # Check if already installed
          if ! command -v cargo-audit &> /dev/null; then
            echo "Installing cargo-audit..."
            cargo install cargo-audit
          else
            echo "‚úÖ cargo-audit already installed"
          fi

      - name: Audit dependencies
        run: |
          # Run audit with configuration (ignores maintenance warnings)
          # Note: "thiserror" version difference is normal (semver prevents auto-upgrade across major versions)
          cargo audit || echo "Audit completed with informational warnings"

  # =============================================================================
  # STEP 4: BUILD DEBUG & TEST
  # =============================================================================
  build-debug:
    name: 4Ô∏è‚É£ Build Debug & Test
    runs-on: ubuntu-latest
    needs: security

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Setup sccache (optional)
        uses: mozilla-actions/sccache-action@v0.0.9
        continue-on-error: true
        with:
          version: "v0.5.4"

      - name: Cache Cargo target
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-target-debug-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-debug-
            ${{ runner.os }}-cargo-target-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build Debug
        run: |
          echo "Building debug version for validation..."
          unset RUSTC_WRAPPER  # Disable sccache if causing issues
          cargo build --target x86_64-unknown-linux-gnu

      - name: Run tests
        run: |
          echo "Running tests with GitHub Actions default cores..."
          unset RUSTC_WRAPPER  # Disable sccache if causing issues
          cargo test --target x86_64-unknown-linux-gnu

      - name: Check debug binary size
        run: |
          ls -la target/x86_64-unknown-linux-gnu/debug/
          echo "üì¶ Debug binary size:"
          du -h target/x86_64-unknown-linux-gnu/debug/lyvoxa

      - name: Upload debug artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyvoxa-debug-${{ github.sha }}
          path: target/x86_64-unknown-linux-gnu/debug/lyvoxa
          retention-days: 7

      - name: Show sccache stats
        run: sccache --show-stats || true

  # =============================================================================
  # FUTURE: MACOS BUILD (COMMENTED OUT)
  # =============================================================================
  # build-macos:
  #   name: Build and Test (macOS)
  #   runs-on: macos-latest
  #   needs: quality
  #   if: false  # Disabled for now
  #   strategy:
  #     matrix:
  #       target: [x86_64-apple-darwin, aarch64-apple-darwin]
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5
  #
  #     - name: Setup Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: ${{ matrix.target }}
  #
  #     - name: Build
  #       run: |
  #         cargo build --release --target ${{ matrix.target }}
  #
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: lyvoxa-${{ matrix.target }}
  #         path: target/${{ matrix.target }}/release/lyvoxa*

  # =============================================================================
  # STEP 5: PERFORMANCE MONITORING
  # =============================================================================
  performance:
    name: 5Ô∏è‚É£ Performance Monitoring
    runs-on: ubuntu-latest
    needs: build-debug
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Download debug artifacts
        uses: actions/download-artifact@v5
        with:
          name: lyvoxa-debug-${{ github.sha }}
          path: ./artifacts/

      - name: Run debug validation
        run: |
          chmod +x artifacts/lyvoxa

          echo "üìä Debug Build Analysis:"
          echo "========================="
          ls -lh artifacts/
          echo ""

          echo "üìà Binary Information:"
          echo "====================="
          file artifacts/lyvoxa
          echo ""

          echo "üîç Binary Dependencies:"
          echo "======================"
          ldd artifacts/lyvoxa || echo "Static binary"
          echo ""

          echo "üß™ Binary Validation:"
          echo "===================="
          if readelf -h artifacts/lyvoxa > /dev/null 2>&1; then
            echo "‚úÖ Debug build is valid ELF binary"
          else
            echo "‚ùå Debug build is invalid"
            exit 1
          fi

          echo ""
          echo "‚úÖ Debug build validated successfully"

  # =============================================================================
  # STEP 5: BUILD OPTIMIZED RELEASE
  # =============================================================================
  build-release:
    name: 5Ô∏è‚É£ Build Optimized Release
    runs-on: ubuntu-latest
    needs: performance
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Cache Cargo target
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-
            ${{ runner.os }}-cargo-

      - name: Build Optimized Release
        run: |
          echo "üöÄ Building optimized release binary..."
          export RUSTFLAGS="-C opt-level=z -C lto=fat -C codegen-units=1 -C strip=symbols"
          cargo build --release --target x86_64-unknown-linux-gnu

          echo ""
          echo "üìä Optimized Binary Analysis:"
          echo "  Size: $(du -h target/x86_64-unknown-linux-gnu/release/lyvoxa | cut -f1)"
          echo "  Type: $(file target/x86_64-unknown-linux-gnu/release/lyvoxa)"

      - name: Verify release binary
        run: |
          echo "üß™ Verifying release binary..."
          if readelf -h target/x86_64-unknown-linux-gnu/release/lyvoxa > /dev/null 2>&1; then
            echo "‚úÖ Release binary is valid ELF"
          else
            echo "‚ùå Release binary is invalid"
            exit 1
          fi

          echo "‚úÖ Optimized release build completed successfully"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyvoxa-release-${{ github.sha }}
          path: target/x86_64-unknown-linux-gnu/release/lyvoxa
          retention-days: 30

# =============================================================================
# WORKFLOW CONFIGURATION
# =============================================================================

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
