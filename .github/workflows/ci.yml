# =============================================================================
# LYVOXA CI/CD PIPELINE - GITHUB ACTIONS
# =============================================================================
# Automated build, test, and release pipeline optimized for ArchLinux
# Author: rezky_nightky
# Version: Stellar 2.0

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, titanium]
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "build.rs"
      - ".cargo/**"
      - "build.sh"
      - "Makefile"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "build.rs"
      - ".cargo/**"
      - ".github/workflows/ci.yml"
  workflow_dispatch:

# Security: Explicit permissions (principle of least privilege)
permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Use GitHub Actions default cores (no custom limits)
  # Cache configuration (optional, fallback if sccache fails)
  SCCACHE_GHA_ENABLED: false

jobs:
  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup sccache (optional)
        uses: mozilla-actions/sccache-action@v0.0.3
        continue-on-error: true
        with:
          version: "v0.5.4"

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Update dependencies
        run: |
          echo "üì¶ Updating dependencies..."
          cargo update
          echo "‚úÖ Dependencies updated"

      - name: Run code formatting check
        run: cargo fmt --check

      - name: Run Clippy
        run: |
          unset RUSTC_WRAPPER
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Audit dependencies
        run: |
          # Run audit with configuration (ignores maintenance warnings)
          cargo audit || echo "Audit completed with informational warnings"

  # =============================================================================
  # BUILD AND TEST - LINUX X86_64
  # =============================================================================
  build-linux:
    name: Build and Test (Linux x86_64)
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        profile: [debug]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Setup sccache (optional)
        uses: mozilla-actions/sccache-action@v0.0.3
        continue-on-error: true
        with:
          version: "v0.5.4"

      - name: Cache Cargo target
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-target-debug-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-debug-
            ${{ runner.os }}-cargo-target-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build Debug
        run: |
          echo "Building debug version for validation..."
          unset RUSTC_WRAPPER  # Disable sccache if causing issues
          cargo build --target x86_64-unknown-linux-gnu

      - name: Run tests
        run: |
          echo "Running tests with GitHub Actions default cores..."
          unset RUSTC_WRAPPER  # Disable sccache if causing issues
          cargo test --target x86_64-unknown-linux-gnu

      - name: Check debug binary size
        run: |
          ls -la target/x86_64-unknown-linux-gnu/debug/
          echo "Debug binary sizes:"
          du -h target/x86_64-unknown-linux-gnu/debug/lyvoxa

      - name: Upload debug artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyvoxa-linux-x86_64
          path: |
            target/x86_64-unknown-linux-gnu/debug/lyvoxa
          retention-days: 30

      - name: Show sccache stats
        run: sccache --show-stats

  # =============================================================================
  # FUTURE: MACOS BUILD (COMMENTED OUT)
  # =============================================================================
  # build-macos:
  #   name: Build and Test (macOS)
  #   runs-on: macos-latest
  #   needs: quality
  #   if: false  # Disabled for now
  #   strategy:
  #     matrix:
  #       target: [x86_64-apple-darwin, aarch64-apple-darwin]
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: ${{ matrix.target }}
  #
  #     - name: Build
  #       run: |
  #         cargo build --release --target ${{ matrix.target }}
  #
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: lyvoxa-${{ matrix.target }}
  #         path: target/${{ matrix.target }}/release/lyvoxa*

  # =============================================================================
  # CI BUILD COMPLETE - RELEASES HANDLED BY release.yml ON TAG PUSH
  # =============================================================================

  # =============================================================================
  # PERFORMANCE MONITORING (DEBUG BUILDS)
  # =============================================================================
  performance:
    name: Performance Monitoring (Debug)
    runs-on: ubuntu-latest
    needs: build-linux
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Download debug artifacts
        uses: actions/download-artifact@v4
        with:
          name: lyvoxa-linux-x86_64
          path: ./artifacts/

      - name: Run debug build validation
        run: |
          chmod +x artifacts/lyvoxa

          echo "üìä Debug Build Analysis:"
          echo "========================="
          ls -la artifacts/
          echo ""
          echo "File sizes (debug):"
          du -h artifacts/*
          echo ""

          echo "üìà Binary Information:"
          echo "====================="
          file artifacts/lyvoxa
          echo ""

          echo "üîç Binary Dependencies:"
          echo "======================"
          ldd artifacts/lyvoxa || echo "Static binary (no dynamic dependencies)"
          echo ""

          echo "üß™ Debug Build Validation:"
          echo "=========================="
          echo "Binary size: $(du -h artifacts/lyvoxa | cut -f1)"

          # Calculate compression ratio
          MAIN_SIZE=$(stat -c%s artifacts/lyvoxa)
          echo "Binary size: $(numfmt --to=iec $MAIN_SIZE)"

          # Basic validation (check if binaries are valid ELF)
          echo ""
          echo "üß™ Binary Validation:"
          echo "===================="
          if readelf -h artifacts/lyvoxa > /dev/null 2>&1; then
            echo "‚úÖ lyvoxa: Valid ELF binary"
          else
            echo "‚ùå lyvoxa: Invalid binary"
            exit 1
          fi


          echo ""
          echo "üéØ Performance Summary:"
          echo "======================"
          echo "‚úÖ Binaries built successfully"
          echo "‚úÖ Size optimization: Simple binary is $(echo "scale=1; $SIMPLE_SIZE * 100 / $MAIN_SIZE" | bc)% of main binary size"
          echo "‚úÖ Ready for distribution"

      - name: Comment PR with performance
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            try {
              const binarySize = execSync('du -h artifacts/lyvoxa | cut -f1').toString().trim();
              const totalSize = execSync('du -ch artifacts/* | tail -1 | cut -f1').toString().trim();

              // Get binary info
              const binaryInfo = execSync('file artifacts/lyvoxa').toString().trim();
              const isStripped = binaryInfo.includes('stripped') ? '‚úÖ Stripped' : '‚ö†Ô∏è Not stripped';

              const comment = `## üß™ Debug Build Analysis Report

              ### üì¶ Debug Binary Sizes
              | Binary | Size | Description |
              |--------|------|-------------|
              | **lyvoxa** | **${binarySize}** | TUI system monitor (debug) |
              | **Total** | **${totalSize}** | Combined debug package size |

              ### üîç Binary Details
              - **Architecture**: Linux x86_64
              - **Build Profile**: Debug (unoptimized, with debug info)
              - **Symbols**: ${isStripped}
              - **Dependencies**: Statically linked

              ### üß™ Debug Build Notes
              - Debug build for development and testing
              - Contains debug symbols and no optimizations
              - Larger size than release builds
              - Used for validation and development

              > üéØ **Quality Check**: All debug binaries validated as proper ELF executables
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Error creating performance comment:', error);
            }

# =============================================================================
# WORKFLOW CONFIGURATION
# =============================================================================

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
