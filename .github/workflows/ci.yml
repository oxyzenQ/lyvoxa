# =============================================================================
# LYVOXA CI/CD PIPELINE - GITHUB ACTIONS
# =============================================================================
# Automated build, test, and release pipeline optimized for ArchLinux
# Author: rezky_nightky
# Version: Stellar 3.0

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, titanium]
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "build.rs"
      - ".cargo/**"
      - "build.sh"
      - "Makefile"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "build.rs"
      - ".cargo/**"
      - ".github/workflows/ci.yml"
  workflow_dispatch:
  repository_dispatch:
    types: [release-trigger]

# Security: Explicit permissions (principle of least privilege)
permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SCCACHE_GHA_ENABLED: false

jobs:
  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup sccache (optional)
        uses: mozilla-actions/sccache-action@v0.0.9
        continue-on-error: true
        with:
          version: "v0.5.4"

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Update dependencies
        run: |
          echo "📦 Updating dependencies..."
          cargo update
          echo "✅ Dependencies updated"

      - name: Run code formatting check
        run: cargo fmt --check

      - name: Run Clippy
        run: |
          unset RUSTC_WRAPPER
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Audit dependencies
        run: |
          # Run audit with configuration (ignores maintenance warnings)
          cargo audit || echo "Audit completed with informational warnings"

  # =============================================================================
  # BUILD AND TEST - LINUX X86_64
  # =============================================================================
  build-linux:
    name: Build and Test (Linux x86_64)
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        profile: [debug]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Setup sccache (optional)
        uses: mozilla-actions/sccache-action@v0.0.9
        continue-on-error: true
        with:
          version: "v0.5.4"

      - name: Cache Cargo target
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-target-debug-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-debug-
            ${{ runner.os }}-cargo-target-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build Debug
        run: |
          echo "Building debug version for validation..."
          unset RUSTC_WRAPPER  # Disable sccache if causing issues
          cargo build --target x86_64-unknown-linux-gnu

      - name: Run tests
        run: |
          echo "Running tests with GitHub Actions default cores..."
          unset RUSTC_WRAPPER  # Disable sccache if causing issues
          cargo test --target x86_64-unknown-linux-gnu

      - name: Check debug binary size
        run: |
          ls -la target/x86_64-unknown-linux-gnu/debug/
          echo "Debug binary sizes:"
          du -h target/x86_64-unknown-linux-gnu/debug/lyvoxa

      - name: Build Optimized Release (Validation)
        run: |
          echo "Building optimized release to validate flags..."
          export RUSTFLAGS="-C opt-level=z -C lto=fat -C codegen-units=1 -C strip=symbols"
          cargo build --release --target x86_64-unknown-linux-gnu
          
          echo ""
          echo "📊 Optimized Binary Analysis:"
          echo "  Size: $(du -h target/x86_64-unknown-linux-gnu/release/lyvoxa | cut -f1)"
          echo "  Type: $(file target/x86_64-unknown-linux-gnu/release/lyvoxa)"
          
          # Calculate size reduction
          DEBUG_SIZE=$(stat -c%s target/x86_64-unknown-linux-gnu/debug/lyvoxa)
          RELEASE_SIZE=$(stat -c%s target/x86_64-unknown-linux-gnu/release/lyvoxa)
          REDUCTION=$(echo "scale=1; 100 - ($RELEASE_SIZE * 100 / $DEBUG_SIZE)" | bc)
          echo "  Size reduction: ${REDUCTION}% smaller than debug"

      - name: Upload debug artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyvoxa-linux-x86_64-debug
          path: |
            target/x86_64-unknown-linux-gnu/debug/lyvoxa
          retention-days: 7

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyvoxa-linux-x86_64-release
          path: |
            target/x86_64-unknown-linux-gnu/release/lyvoxa
          retention-days: 30

      - name: Show sccache stats
        run: sccache --show-stats

  # =============================================================================
  # FUTURE: MACOS BUILD (COMMENTED OUT)
  # =============================================================================
  # build-macos:
  #   name: Build and Test (macOS)
  #   runs-on: macos-latest
  #   needs: quality
  #   if: false  # Disabled for now
  #   strategy:
  #     matrix:
  #       target: [x86_64-apple-darwin, aarch64-apple-darwin]
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5
  #
  #     - name: Setup Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: ${{ matrix.target }}
  #
  #     - name: Build
  #       run: |
  #         cargo build --release --target ${{ matrix.target }}
  #
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: lyvoxa-${{ matrix.target }}
  #         path: target/${{ matrix.target }}/release/lyvoxa*

  # =============================================================================
  # CI BUILD COMPLETE - RELEASES HANDLED BY release.yml ON TAG PUSH
  # =============================================================================

  # =============================================================================
  # PERFORMANCE MONITORING (DEBUG & RELEASE BUILDS)
  # =============================================================================
  performance:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: build-linux
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Download debug artifacts
        uses: actions/download-artifact@v5
        with:
          name: lyvoxa-linux-x86_64-debug
          path: ./artifacts/debug/

      - name: Download release artifacts
        uses: actions/download-artifact@v5
        with:
          name: lyvoxa-linux-x86_64-release
          path: ./artifacts/release/

      - name: Run build validation
        run: |
          chmod +x artifacts/debug/lyvoxa
          chmod +x artifacts/release/lyvoxa

          echo "📊 Build Analysis:"
          echo "========================="
          ls -la artifacts/debug/
          ls -la artifacts/release/
          echo ""

          echo "📈 Binary Comparison:"
          echo "====================="
          DEBUG_SIZE=$(stat -c%s artifacts/debug/lyvoxa)
          RELEASE_SIZE=$(stat -c%s artifacts/release/lyvoxa)
          REDUCTION=$(echo "scale=1; 100 - ($RELEASE_SIZE * 100 / $DEBUG_SIZE)" | bc)
          
          echo "Debug binary:   $(numfmt --to=iec $DEBUG_SIZE) (with symbols)"
          echo "Release binary: $(numfmt --to=iec $RELEASE_SIZE) (optimized + stripped)"
          echo "Size reduction: ${REDUCTION}%"
          echo ""

          echo "📈 Binary Information:"
          echo "====================="
          echo "Debug:"
          file artifacts/debug/lyvoxa
          echo ""
          echo "Release:"
          file artifacts/release/lyvoxa
          echo ""

          echo "🔍 Binary Dependencies:"
          echo "======================"
          echo "Debug:"
          ldd artifacts/debug/lyvoxa || echo "Static binary"
          echo ""
          echo "Release:"
          ldd artifacts/release/lyvoxa || echo "Static binary"
          echo ""

          # Basic validation (check if binaries are valid ELF)
          echo "🧪 Binary Validation:"
          echo "===================="
          if readelf -h artifacts/debug/lyvoxa > /dev/null 2>&1; then
            echo "✅ Debug: Valid ELF binary"
          else
            echo "❌ Debug: Invalid binary"
            exit 1
          fi
          
          if readelf -h artifacts/release/lyvoxa > /dev/null 2>&1; then
            echo "✅ Release: Valid ELF binary"
          else
            echo "❌ Release: Invalid binary"
            exit 1
          fi

          echo ""
          echo "🎯 Performance Summary:"
          echo "======================"
          echo "✅ Both builds completed successfully"
          echo "✅ Optimization flags validated in CI"
          echo "✅ Size reduction: ${REDUCTION}% (debug → release)"
          echo "✅ Ready for distribution"

      - name: Comment PR with performance
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            try {
              const debugSize = execSync('du -h artifacts/debug/lyvoxa | cut -f1').toString().trim();
              const releaseSize = execSync('du -h artifacts/release/lyvoxa | cut -f1').toString().trim();

              // Get binary info
              const releaseInfo = execSync('file artifacts/release/lyvoxa').toString().trim();
              const isStripped = releaseInfo.includes('stripped') ? '✅ Stripped' : '⚠️ Not stripped';

              // Calculate size reduction
              const debugBytes = parseInt(execSync('stat -c%s artifacts/debug/lyvoxa').toString().trim());
              const releaseBytes = parseInt(execSync('stat -c%s artifacts/release/lyvoxa').toString().trim());
              const reduction = ((100 - (releaseBytes * 100 / debugBytes))).toFixed(1);

              const comment = \`## 🧪 Build Analysis Report

              ### 📦 Binary Size Comparison
              | Build Profile | Size | Optimization Flags | Description |
              |--------------|------|-------------------|-------------|
              | **Debug** | **${debugSize}** | None | Unoptimized with debug symbols |
              | **Release** | **${releaseSize}** | \`-C opt-level=z -C lto=fat\` | Optimized & stripped |
              | **Reduction** | **${reduction}%** | ⚡ Smaller | Size optimization achieved |

              ### 🔍 Release Binary Details
              - **Architecture**: Linux x86_64
              - **Optimization**: \`opt-level=z\` (size optimization)
              - **LTO**: Fat LTO enabled (cross-crate inlining)
              - **Codegen Units**: 1 (maximum optimization)
              - **Symbols**: ${isStripped}
              - **Dependencies**: Dynamically linked

              ### ✅ CI Validation
              - ✅ Format check passed
              - ✅ Clippy linting passed
              - ✅ Unit tests passed
              - ✅ Debug build validated
              - ✅ Optimized release build validated
              - ✅ Optimization flags tested in CI

              > 🎯 **Quality Check**: Both debug and release binaries validated as proper ELF executables
              \`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Error creating performance comment:', error);
            }

# =============================================================================
# WORKFLOW CONFIGURATION
# =============================================================================

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
