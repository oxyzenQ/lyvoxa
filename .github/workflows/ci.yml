# =============================================================================
# LYVOXA CI/CD PIPELINE - GITHUB ACTIONS
# =============================================================================
# Automated build, test, and release pipeline with CPU limits
# Author: rezky_nightky
# Version: Stellar 1.5

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, titanium ]
    tags: [ 'v*', 'stellar-*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Use GitHub Actions default cores (no custom limits)
  # Cache configuration (optional, fallback if sccache fails)
  SCCACHE_GHA_ENABLED: false

jobs:
  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup sccache (optional)
        uses: mozilla-actions/sccache-action@v0.0.3
        continue-on-error: true
        with:
          version: "v0.5.4"

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Check code formatting
        run: cargo fmt --check

      - name: Run Clippy
        run: |
          # Disable sccache if it's causing issues
          unset RUSTC_WRAPPER
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Audit dependencies (ignore unmaintained)
        run: |
          # Run audit but only fail on actual vulnerabilities, not maintenance warnings
          cargo audit --ignore RUSTSEC-2024-0436 || echo "Audit completed with warnings (non-critical)"

  # =============================================================================
  # BUILD AND TEST - LINUX X86_64
  # =============================================================================
  build-linux:
    name: Build and Test (Linux x86_64)
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        profile: [debug, release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Setup sccache (optional)
        uses: mozilla-actions/sccache-action@v0.0.3
        continue-on-error: true
        with:
          version: "v0.5.4"

      - name: Cache Cargo target
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-target-${{ matrix.profile }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ matrix.profile }}-
            ${{ runner.os }}-cargo-target-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build (Debug)
        if: matrix.profile == 'debug'
        run: |
          echo "Building debug version with GitHub Actions default cores..."
          unset RUSTC_WRAPPER  # Disable sccache if causing issues
          cargo build --target x86_64-unknown-linux-gnu

      - name: Build (Release)
        if: matrix.profile == 'release'
        run: |
          echo "Building release version with GitHub Actions default cores..."
          unset RUSTC_WRAPPER  # Disable sccache if causing issues
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Run tests
        run: |
          echo "Running tests with GitHub Actions default cores..."
          unset RUSTC_WRAPPER  # Disable sccache if causing issues
          cargo test --target x86_64-unknown-linux-gnu

      - name: Run benchmarks
        if: matrix.profile == 'release'
        run: |
          unset RUSTC_WRAPPER  # Disable sccache if causing issues
          cargo bench --target x86_64-unknown-linux-gnu

      - name: Check binary size
        if: matrix.profile == 'release'
        run: |
          ls -la target/x86_64-unknown-linux-gnu/release/
          echo "Main binary size:"
          du -h target/x86_64-unknown-linux-gnu/release/lyvoxa
          echo "Simple binary size:"
          du -h target/x86_64-unknown-linux-gnu/release/lyvoxa-simple

      - name: Upload artifacts (Release)
        if: matrix.profile == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: lyvoxa-linux-x86_64
          path: |
            target/x86_64-unknown-linux-gnu/release/lyvoxa
            target/x86_64-unknown-linux-gnu/release/lyvoxa-simple
          retention-days: 30

      - name: Show sccache stats
        run: sccache --show-stats

  # =============================================================================
  # FUTURE: MACOS BUILD (COMMENTED OUT)
  # =============================================================================
  # build-macos:
  #   name: Build and Test (macOS)
  #   runs-on: macos-latest
  #   needs: quality
  #   if: false  # Disabled for now
  #   strategy:
  #     matrix:
  #       target: [x86_64-apple-darwin, aarch64-apple-darwin]
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: ${{ matrix.target }}
  #
  #     - name: Build
  #       run: |
  #         cargo build --release --target ${{ matrix.target }}
  #
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: lyvoxa-${{ matrix.target }}
  #         path: target/${{ matrix.target }}/release/lyvoxa*

  # =============================================================================
  # DOCKER BUILD
  # =============================================================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build-linux
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=stellar-1.5,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_JOBS=0
            RUST_VERSION=stable
            TARGET=x86_64-unknown-linux-gnu
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # RELEASE CREATION
  # =============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, docker]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: lyvoxa-linux-x86_64
          path: ./artifacts/

      - name: Create release archive
        run: |
          cd artifacts
          chmod +x lyvoxa lyvoxa-simple
          tar -czf lyvoxa-stellar-1.5-linux-x86_64.tar.gz lyvoxa lyvoxa-simple
          sha256sum lyvoxa-stellar-1.5-linux-x86_64.tar.gz > lyvoxa-stellar-1.5-linux-x86_64.tar.gz.sha256

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/lyvoxa-stellar-1.5-linux-x86_64.tar.gz
            artifacts/lyvoxa-stellar-1.5-linux-x86_64.tar.gz.sha256
          body: |
            # Lyvoxa Stellar 1.5 Release
            
            High-performance system monitoring tool for Linux x86_64.
            
            ## What's New
            - Optimized build system with CPU core limits
            - Enhanced performance monitoring
            - Improved memory efficiency
            
            ## Installation
            
            ### Quick Install
            ```bash
            wget https://github.com/oxyzenQ/lyvoxa/releases/download/${{ github.ref_name }}/lyvoxa-stellar-1.5-linux-x86_64.tar.gz
            tar -xzf lyvoxa-stellar-1.5-linux-x86_64.tar.gz
            sudo mv lyvoxa lyvoxa-simple /usr/local/bin/
            ```
            
            ### Docker
            ```bash
            docker pull ghcr.io/oxyzenq/lyvoxa:stellar-1.5
            docker run --rm --privileged --pid=host ghcr.io/oxyzenq/lyvoxa:stellar-1.5
            ```
            
            ## System Requirements
            - Linux x86_64 (Arch Linux recommended)
            - Minimal system resources
            
            ## Checksums
            Verify your download with SHA256:
            ```bash
            sha256sum -c lyvoxa-stellar-1.5-linux-x86_64.tar.gz.sha256
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # PERFORMANCE MONITORING
  # =============================================================================
  performance:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: build-linux
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: lyvoxa-linux-x86_64
          path: ./artifacts/

      - name: Run performance tests
        run: |
          chmod +x artifacts/lyvoxa
          echo "Binary size analysis:"
          ls -la artifacts/
          du -h artifacts/*
          
          echo "Performance baseline test:"
          timeout 5s artifacts/lyvoxa || true

      - name: Comment PR with performance
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            const binarySize = execSync('du -h artifacts/lyvoxa | cut -f1').toString().trim();
            const simpleBinarySize = execSync('du -h artifacts/lyvoxa-simple | cut -f1').toString().trim();
            
            const comment = `## 🚀 Performance Report
            
            | Binary | Size |
            |--------|------|
            | lyvoxa | ${binarySize} |
            | lyvoxa-simple | ${simpleBinarySize} |
            
            Built with GitHub Actions default CPU cores.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

# =============================================================================
# WORKFLOW CONFIGURATION
# =============================================================================

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
