name: CodeQL Deep Analysis

on:
  push:
    branches: [ main ]
    tags:
      - 'stellar-*'
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  shell-lint:
    name: Shell Lint (shellcheck)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run shellcheck
        run: |
          set -euo pipefail
          shopt -s globstar || true
          files=( $(git ls-files '*.sh') )
          if [ ${#files[@]} -eq 0 ]; then
            echo "No shell scripts found; skipping"
            exit 0
          fi
          shellcheck -S style "${files[@]}"

  codeql:
    name: CodeQL (deep) â€” ${{ matrix.rust }}
    runs-on: ubuntu-latest
    needs: [shell-lint]
    strategy:
      fail-fast: false
      matrix:
        rust: [ stable, nightly ]
    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: codeql
          cache-on-failure: true

      - name: Initialize CodeQL
        id: init
        uses: github/codeql-action/init@v3
        with:
          languages: rust
          # Full-depth queries
          queries: security-and-quality

      - name: Build (before scan)
        run: |
          cargo build --release --all-features --verbose

      # Analyze with the CodeQL Action (uploads to Security tab)
      - name: Analyze (upload to Security tab)
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:rust-${{ matrix.rust }}"
          upload: true

      # Locate CodeQL database directory (best-effort)
      - name: Locate CodeQL database
        id: find-db
        run: |
          set -euo pipefail
          DB_DIR=$(find "$RUNNER_TEMP" "$GITHUB_WORKSPACE" -type d -name codeql_databases -print -quit || true)
          if [ -n "$DB_DIR" ]; then
            echo "db_dir=$DB_DIR" >> "$GITHUB_OUTPUT"
            echo "Found database dir: $DB_DIR"
          else
            echo "db_dir=" >> "$GITHUB_OUTPUT"
            echo "No database directory found"
          fi

      # Export SARIF locally using CLI as an artifact for offline inspection (best-effort)
      - name: Export SARIF (CLI)
        if: steps.find-db.outputs.db_dir != ''
        run: |
          set -euo pipefail
          DB_DIR="${{ steps.find-db.outputs.db_dir }}"
          DB=$(find "$DB_DIR" -mindepth 1 -maxdepth 1 -type d -print -quit || true)
          if [ -z "$DB" ]; then
            echo "No DB found under $DB_DIR, skipping CLI export"
            exit 0
          fi
          # CodeQL CLI is placed on PATH by the init action
          codeql database analyze "$DB" \
            codeql/rust-queries:codeql-suites/rust-security-and-quality.qls \
            --format=sarifv2 --output codeql-results-${{ matrix.rust }}.sarif \
            --verbosity=progress --threads=0 --download --no-redistribute

      - name: Upload SARIF artifact
        if: steps.find-db.outputs.db_dir != '' && hashFiles('codeql-results-*.sarif') != ''
        uses: actions/upload-artifact@v4
        with:
          name: codeql-sarif-${{ matrix.rust }}
          path: codeql-results-${{ matrix.rust }}.sarif
          if-no-files-found: ignore

      - name: Upload CodeQL database artifact
        if: steps.find-db.outputs.db_dir != ''
        uses: actions/upload-artifact@v4
        with:
          name: codeql-database-${{ matrix.rust }}
          path: ${{ steps.find-db.outputs.db_dir }}
          if-no-files-found: warn

      - name: Fail if high/critical issues found
        if: hashFiles('codeql-results-*.sarif') != ''
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y jq
          COUNT=$(jq -r '[.runs[].results[] | (.properties["security-severity"] // "0") | tonumber] | map(select(. >= 7.0)) | length' codeql-results-${{ matrix.rust }}.sarif || echo 0)
          echo "High/Critical findings: $COUNT"
          if [ "$COUNT" -gt 0 ]; then
            echo "Detected high/critical CodeQL findings (>=7.0). Failing build." >&2
            exit 1
          fi

      - name: Write summary
        if: hashFiles('codeql-results-*.sarif') != ''
        env:
          MATRIX_RUST: ${{ matrix.rust }}
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y jq
          FILE="codeql-results-${MATRIX_RUST}.sarif"
          TOTAL=$(jq -r '[.runs[].results[]] | length' "$FILE" || echo 0)
          HIGH=$(jq -r '[.runs[].results[] | (.properties["security-severity"] // "0") | tonumber] | map(select(. >= 7.0)) | length' "$FILE" || echo 0)
          echo "## CodeQL Deep Analysis ($MATRIX_RUST)" >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || true
          echo "- Total findings: $TOTAL" >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || true
          echo "- High/Critical (>=7.0): $HIGH" >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || true

  dependency-scan:
    name: Dependency Scan (audit & deny)
    runs-on: ubuntu-latest
    needs: [shell-lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: dep-scan
          cache-on-failure: true

      - name: Install cargo-audit
        run: cargo install --locked cargo-audit

      - name: Run cargo audit
        run: |
          cargo audit --json > audit-${{ github.run_id }}.json || true
          # Fail on non-zero vulnerabilities by re-running without --json to get exit code
          cargo audit

      - name: Upload cargo-audit JSON
        uses: actions/upload-artifact@v4
        with:
          name: cargo-audit-${{ github.run_id }}
          path: audit-${{ github.run_id }}.json

      - name: Cargo Deny
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check
