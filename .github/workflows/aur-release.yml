# =============================================================================
# AUR AUTO-SYNC WORKFLOW (ADVANCED)
# =============================================================================
# Auto-trigger: After release.yml completes OR changes in lyvoxa-aur-bin/
# Auto-update: pkgver, sha256sums, .SRCINFO
# Auto-push: Only if changes detected
# Author: rezky_nightky
#
# IMPORTANT: Runs AFTER release.yml to ensure GitHub release artifacts exist

name: 📦 AUR Sync

on:
  workflow_run:
    workflows: ["🌟 Release"]
    types:
      - completed
  push:
    paths:
      - 'lyvoxa-aur-bin/**'
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  aur-sync:
    name: 🔄 Sync to AUR
    runs-on: ubuntu-latest
    # Only run if release workflow succeeded (or manual/path trigger)
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    env:
      PKGDIR: lyvoxa-aur-bin
      AUR_REPO: lyvoxa-bin
      AUR_URL: ssh://aur@aur.archlinux.org/lyvoxa-bin.git

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup SSH for AUR
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        run: |
          echo "🔐 Setting up SSH for AUR..."
          mkdir -p ~/.ssh
          echo "$AUR_SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          cat > ~/.ssh/config << 'EOF'
          Host aur.archlinux.org
            User aur
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking accept-new
          EOF

          chmod 600 ~/.ssh/config
          echo "✅ SSH configured"

      - name: Detect version from tag or PKGBUILD
        id: version
        run: |
          echo "🔍 Detecting version..."
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
            echo "📌 Version from tag: $VERSION"
          else
            cd $PKGDIR
            VERSION=$(grep -Po '(?<=pkgver=).*' PKGBUILD)
            echo "📌 Version from PKGBUILD: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update PKGBUILD pkgver and sha256sums
        run: |
          echo "🔧 Updating PKGBUILD..."
          cd $PKGDIR

          # Update version
          sed -i "s/^pkgver=.*/pkgver=${{ steps.version.outputs.version }}/" PKGBUILD

          # Extract source URL and update sha256sums
          source PKGBUILD
          if [[ ${#source[@]} -gt 0 ]]; then
            echo "📥 Calculating sha256sums for sources..."
            SUMS=()
            for src in "${source[@]}"; do
              # Extract URL from 'name::url' format
              url=$(echo "$src" | grep -oE 'https?://[^ ]+' || echo "$src")

              if [[ $url =~ ^https?:// ]]; then
                echo "  Downloading: $url"
                wget -q -O /tmp/source_file "$url" || { echo "⚠️  Skip (download failed)"; SUMS+=("SKIP"); continue; }
                sha=$(sha256sum /tmp/source_file | cut -d' ' -f1)
                SUMS+=("$sha")
                echo "  ✅ SHA256: $sha"
                rm -f /tmp/source_file
              else
                SUMS+=("SKIP")
              fi
            done

            # Update sha256sums in PKGBUILD
            if [[ ${#SUMS[@]} -gt 0 ]]; then
              SHA_ARRAY="sha256sums=("
              for sum in "${SUMS[@]}"; do
                SHA_ARRAY+="'$sum' "
              done
              SHA_ARRAY+=")"

              # Replace sha256sums line
              sed -i "/^sha256sums=/c\\$SHA_ARRAY" PKGBUILD
              echo "✅ Updated sha256sums in PKGBUILD"
            fi
          fi

          echo "✅ PKGBUILD updated (version=${{ steps.version.outputs.version }})"

      - name: Generate .SRCINFO using Arch container
        run: |
          echo "📝 Generating .SRCINFO in Arch container..."
          docker run --rm -v $PWD/$PKGDIR:/pkg archlinux:latest bash -c "
            pacman -Sy --noconfirm base-devel sudo > /dev/null 2>&1 &&
            useradd -m builder &&
            chown -R builder:builder /pkg &&
            cd /pkg &&
            sudo -u builder makepkg --printsrcinfo > .SRCINFO
          "
          echo "✅ .SRCINFO generated"
          echo ""
          echo "Preview:"
          head -20 $PKGDIR/.SRCINFO

      - name: Clone AUR repository
        run: |
          echo "📥 Cloning AUR repository..."
          git clone "$AUR_URL" aur-repo
          echo "✅ AUR repo cloned"

      - name: Sync files to AUR repo
        run: |
          echo "🔄 Syncing files to AUR..."
          rsync -av --delete --exclude='.git' $PKGDIR/ aur-repo/

          cd aur-repo
          git config user.name 'GitHub Action Bot'
          git config user.email 'actions@github.com'

          # Check for changes
          if [[ -n "$(git status --porcelain)" ]]; then
            git add -A
            echo "✅ Changes detected"
            echo "changed=true" >> $GITHUB_ENV

            echo ""
            echo "📝 Changes to commit:"
            git status --short
          else
            echo "ℹ️  No changes detected"
            echo "changed=false" >> $GITHUB_ENV
          fi

      - name: Commit and push to AUR
        if: env.changed == 'true'
        run: |
          cd aur-repo

          # Commit
          git commit -m "ci: sync $AUR_REPO v${{ steps.version.outputs.version }}" \
                     -m "" \
                     -m "Automated sync from GitHub" \
                     -m "Source: https://github.com/oxyzenQ/lyvoxa"

          echo "🚀 Pushing to AUR..."
          git push

          echo "✅ Successfully pushed to AUR"
          echo "🔗 https://aur.archlinux.org/packages/$AUR_REPO"

      - name: Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 AUR SYNC SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          if [ "${{ env.changed }}" == "true" ]; then
            echo "✅ Package synced to AUR"
            echo "📋 Package: $AUR_REPO"
            echo "🔢 Version: ${{ steps.version.outputs.version }}"
            echo "🔗 https://aur.archlinux.org/packages/$AUR_REPO"
            echo ""
            echo "🎯 Users can install with:"
            echo "   yay -S $AUR_REPO"
            echo "   paru -S $AUR_REPO"
          else
            echo "ℹ️  No changes to push"
            echo "📦 Package: $AUR_REPO v${{ steps.version.outputs.version }}"
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
