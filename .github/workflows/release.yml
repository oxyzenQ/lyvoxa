# =============================================================================
# LYVOXA RELEASE PIPELINE - PROFESSIONAL ORDERED BUILD
# =============================================================================
# Runs AFTER Version Bump Bot completes
# Order: Version Bump ‚Üí CI Pipeline ‚Üí Release Build ‚Üí AUR Sync
# Author: rezky_nightky

name: üåü Release

on:
  push:
    tags:
      - '**'  # trigger on any tag
  workflow_run:
    workflows: ["ü§ñ Version Bump Bot"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 3.0, 3.0.1)"
        required: true

permissions:
  contents: write
  security-events: write
  actions: read
  pull-requests: write
  checks: write

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: lyvoxa

jobs:
  # =============================================================================
  # STEP 1: RUN CI PIPELINE (CodeQL ‚Üí DCO ‚Üí Build/Test ‚Üí Performance)
  # =============================================================================
  run-ci:
    name: 1Ô∏è‚É£ Run CI Pipeline
    uses: ./.github/workflows/ci.yml
    permissions:
      contents: read
      checks: write
      security-events: write
      actions: read
      pull-requests: write

  # =============================================================================
  # STEP 2: BUILD OPTIMIZED RELEASE
  # =============================================================================
  build-release:
    name: 2Ô∏è‚É£ Build Optimized Release
    runs-on: ubuntu-latest
    needs: run-ci
    # Only run if CI succeeded (or manual trigger or tag push)
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      rel_tag: ${{ steps.set_version.outputs.rel_tag }}

    steps:
      - name: Determine release tag
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            REL_TAG="${{ github.event.inputs.version }}"
          else
            REL_TAG="${GITHUB_REF_NAME}"
          fi
          echo "REL_TAG=$REL_TAG" >> $GITHUB_ENV
          echo "rel_tag=$REL_TAG" >> $GITHUB_OUTPUT
          VERSION=$(echo "$REL_TAG" | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Build Optimized Binary
        run: |
          echo "üöÄ Building optimized release with LTO..."
          export RUSTFLAGS="-C opt-level=z -C lto=fat -C codegen-units=1 -C strip=symbols"
          cargo build --release --target x86_64-unknown-linux-gnu
          strip --strip-all target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME

          echo ""
          echo "üìä Binary Analysis:"
          ls -lh target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME
          file target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME
          echo ""
          echo "‚úÖ Optimized release build completed"

      - name: Setup GPG (if available)
        run: |
          echo "üîê Setting up GPG for signing..."
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
          echo "‚úÖ GPG key imported"
        continue-on-error: true

      - name: Create Package
        run: |
          # Get version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi

          VERSION=$(echo "$VERSION" | sed 's/^v//')
          ARTIFACT="$PROJECT_NAME-$VERSION-linux-amd64"

          # Create clean package structure
          mkdir -p $ARTIFACT/bin
          cp target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME $ARTIFACT/bin/
          cp README.md LICENSE $ARTIFACT/
          cp docs/CHANGELOG.md $ARTIFACT/ 2>/dev/null || true

          # Create tarball
          tar -czf $ARTIFACT.tar.gz $ARTIFACT/

          # Generate SHA256 checksum
          sha256sum $ARTIFACT.tar.gz > $ARTIFACT.tar.gz.sha256

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV

          echo "‚úÖ Package: $ARTIFACT.tar.gz ($(du -h $ARTIFACT.tar.gz | cut -f1))"

      - name: Sign Package (GPG - Full Verification Chain)
        run: |
          echo "üîè Creating professional signature chain..."
          echo ""

          # Function to sign with or without passphrase
          sign_file() {
            local input="$1"
            local output="$2"
            local armor="$3"

            if [ -n "${{ secrets.GPG_PASSPHRASE }}" ]; then
              echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 \
                --pinentry-mode loopback $armor --output "$output" --detach-sign "$input"
            else
              gpg --batch --yes $armor --output "$output" --detach-sign "$input"
            fi
          }

          # 1. Binary signature (.sig) - for packaging systems
          echo "üì¶ Creating binary signature (.sig)..."
          sign_file "$ARTIFACT.tar.gz" "$ARTIFACT.tar.gz.sig" ""

          # 2. ASCII-armored signature (.asc) - for humans & GitHub
          echo "üìú Creating ASCII-armored signature (.asc)..."
          sign_file "$ARTIFACT.tar.gz" "$ARTIFACT.tar.gz.asc" "--armor"

          # 3. Sign SHA256 checksum (full chain of trust)
          echo "üîê Signing SHA256 checksum..."
          sign_file "$ARTIFACT.tar.gz.sha256" "$ARTIFACT.tar.gz.sha256.asc" "--armor"

          echo ""
          echo "‚úÖ Signature Suite Created:"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          ls -lh $ARTIFACT.tar.gz* | awk '{print "  " $9 " (" $5 ")"}'
          echo ""

          # Verify all signatures
          echo "üîç Verifying signatures..."
          echo ""

          if gpg --verify $ARTIFACT.tar.gz.sig $ARTIFACT.tar.gz 2>&1 | grep "Good signature"; then
            echo "‚úÖ Binary signature (.sig) valid"
          fi

          if gpg --verify $ARTIFACT.tar.gz.asc $ARTIFACT.tar.gz 2>&1 | grep "Good signature"; then
            echo "‚úÖ ASCII signature (.asc) valid"
          fi

          if gpg --verify $ARTIFACT.tar.gz.sha256.asc $ARTIFACT.tar.gz.sha256 2>&1 | grep "Good signature"; then
            echo "‚úÖ SHA256 signature (.sha256.asc) valid"
          fi

          echo ""
          echo "üéØ Professional Release Suite Complete:"
          echo "  üì¶ $ARTIFACT.tar.gz (binary)"
          echo "  üîê $ARTIFACT.tar.gz.sha256 (integrity)"
          echo "  ü§ñ $ARTIFACT.tar.gz.sig (machine signature)"
          echo "  üìú $ARTIFACT.tar.gz.asc (human signature)"
          echo "  ‚úÖ $ARTIFACT.tar.gz.sha256.asc (signed hash)"
        continue-on-error: true

      - name: Generate Changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "## Changes" > CHANGELOG.txt
            git log --oneline --pretty="- %s (%h)" -20 >> CHANGELOG.txt
          else
            echo "## Changes since $PREV_TAG" > CHANGELOG.txt
            git log $PREV_TAG..HEAD --oneline --pretty="- %s (%h)" >> CHANGELOG.txt
          fi

      - name: Create Release Notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          ```
          ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
          ‚ïë                                                          ‚ïë
          ‚ïë     ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ïë
          ‚ïë     ‚ñà‚ñà‚ïë  ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó   ‚ïë
          ‚ïë     ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ïë
          ‚ïë     ‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ïë
          ‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ïë
          ‚ïë     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïë
          ‚ïë                                                          ‚ïë
          ‚ïë          System Monitor ¬∑ Born from Shadows             ‚ïë
          ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
          ```

          > *"In the depths of your system, where processes whisper and metrics dance,*  
          > *Lyvoxa watches. Silent. Precise. Unstoppable."*

          ---

          ## üåë What Lurks in This Release

          EOF
          cat CHANGELOG.txt >> RELEASE_NOTES.md

          cat >> RELEASE_NOTES.md << EOF

          ---

          ## üîê The Seal of Trust

          > Every byte signed. Every hash verified. Trust through mathematics.

          <details>
          <summary><b>üîç Quick Integrity Check</b></summary>

          \`\`\`bash
          # Verify the SHA256 fingerprint
          sha256sum -c $ARTIFACT.tar.gz.sha256
          \`\`\`

          **Expected:** ‚úÖ OK

          </details>

          <details>
          <summary><b>üóùÔ∏è Full Cryptographic Verification</b></summary>

          **Step 1: Summon the Key** *(one-time ritual)*
          \`\`\`bash
          gpg --keyserver hkps://keys.openpgp.org --recv-keys 0D8D13BB989AF9F0
          \`\`\`

          **Step 2: Verify the Signature**
          \`\`\`bash
          # Machine signature (for automation)
          gpg --verify $ARTIFACT.tar.gz.sig $ARTIFACT.tar.gz

          # Human signature (ASCII-armored)
          gpg --verify $ARTIFACT.tar.gz.asc $ARTIFACT.tar.gz

          # Chain of trust (signed checksum)
          gpg --verify $ARTIFACT.tar.gz.sha256.asc $ARTIFACT.tar.gz.sha256
          sha256sum -c $ARTIFACT.tar.gz.sha256
          \`\`\`

          **Blessed Output:**
          \`\`\`
          gpg: Good signature from "Rezky Cahya Sahputra (Investor) <with.rezky@gmail.com>"
          Primary key fingerprint: 3495 ABF0 957D 28A7 E850  1375 0D8D 13BB 989A F9F0
          \`\`\`

          </details>

          ---

          ## üì¶ Artifacts Manifest

          | File | Purpose | Size |
          |------|---------|------|
          | \`$ARTIFACT.tar.gz\` | Binary distribution | ~ |
          | \`$ARTIFACT.tar.gz.sha256\` | Integrity checksum | 64 bytes |
          | \`$ARTIFACT.tar.gz.sig\` | GPG signature (binary) | ~ |
          | \`$ARTIFACT.tar.gz.asc\` | GPG signature (ASCII) | ~ |
          | \`$ARTIFACT.tar.gz.sha256.asc\` | Signed checksum | ~ |

          ---

          <div align="center">

          **Installation via AUR:**  
          \`yay -S lyvoxa-bin\` or \`paru -S lyvoxa-bin\`

          **Full Timeline:** [View all commits](${{ github.server_url }}/${{ github.repository }}/commits/$VERSION)

          *Crafted with precision ¬∑ Secured with cryptography*

          </div>
          EOF

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyvoxa-release-artifacts-${{ github.sha }}
          path: |
            ${{ env.ARTIFACT }}.tar.gz
            ${{ env.ARTIFACT }}.tar.gz.sha256
            ${{ env.ARTIFACT }}.tar.gz.sig
            ${{ env.ARTIFACT }}.tar.gz.asc
            ${{ env.ARTIFACT }}.tar.gz.sha256.asc
            RELEASE_NOTES.md
          retention-days: 30

  # =============================================================================
  # STEP 3: PUBLISH RELEASE
  # =============================================================================
  publish:
    name: 3Ô∏è‚É£ Publish Release
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      contents: write

    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v5
        with:
          name: lyvoxa-release-artifacts-${{ github.sha }}
          path: ./release/

      - name: Prepare release files
        run: |
          cd release
          echo "üìã Files to publish:"
          ls -lh

      - name: Publish to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          name: "Lyvoxa ${{ needs.build-release.outputs.rel_tag }}"
          tag_name: ${{ needs.build-release.outputs.rel_tag }}
          body_path: release/RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: release/*
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "‚úÖ Release ${{ github.ref_name }} published successfully"
          echo "üì¶ Artifacts uploaded to GitHub Releases"
          echo "üîó https://github.com/oxyzenQ/lyvoxa/releases/tag/${{ github.ref_name }}"

