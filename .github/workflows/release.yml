# =============================================================================
# LYVOXA STELLAR RELEASE PIPELINE - PORTFOLIO GRADE
# =============================================================================
# Professional release workflow with multi-checksum and SSH signing
# Author: rezky_nightky
# Version: Stellar 1.5

name: üåü Stellar Release

on:
  push:
    tags:
      - 'stellar-*'
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., stellar-1.5)'
        required: true
        default: 'stellar-1.5'

permissions:
  contents: write
  packages: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  PROJECT_NAME: lyvoxa
  # Disable sccache to avoid GitHub Actions cache issues
  SCCACHE_GHA_ENABLED: false
  
jobs:
  # =============================================================================
  # PORTFOLIO-GRADE RELEASE BUILD
  # =============================================================================
  stellar-release:
    name: üöÄ Stellar Release Build
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation

      - name: ü¶Ä Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: üì¶ Setup Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential openssl libssl-dev
          
          # Install BLAKE3 for checksums
          cargo install b3sum
          
          echo "üîß Build environment ready"

      - name: üèóÔ∏è Build Optimized Release Binary
        run: |
          echo "üöÄ Building Lyvoxa Stellar Edition..."
          echo "Target: x86_64-unknown-linux-gnu"
          echo "Optimization: Maximum performance"
          
          # Build with GitHub Actions default cores for maximum performance
          cargo build --release --target x86_64-unknown-linux-gnu
          
          # Verify binaries exist
          ls -la target/x86_64-unknown-linux-gnu/release/
          
          echo "‚úÖ Build completed successfully!"

      - name: üìä Binary Analysis
        run: |
          echo "üìä Binary Analysis Report:"
          echo "=========================="
          
          MAIN_BIN="target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME"
          SIMPLE_BIN="target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME-simple"
          
          if [ -f "$MAIN_BIN" ]; then
            echo "Main binary size: $(du -h $MAIN_BIN | cut -f1)"
            echo "Main binary info: $(file $MAIN_BIN)"
          fi
          
          if [ -f "$SIMPLE_BIN" ]; then
            echo "Simple binary size: $(du -h $SIMPLE_BIN | cut -f1)"
            echo "Simple binary info: $(file $SIMPLE_BIN)"
          fi

      - name: üì¶ Create Professional Release Package
        run: |
          echo "üì¶ Creating professional release package..."
          
          # Determine version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "Version: $VERSION"
          echo "GitHub Ref: $GITHUB_REF"
          echo "Event Name: ${{ github.event_name }}"
          
          # Validate version is not empty
          if [ -z "$VERSION" ]; then
            echo "‚ùå Error: VERSION is empty!"
            echo "GITHUB_REF: $GITHUB_REF"
            echo "Falling back to timestamp version"
            VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          fi
          
          echo "Final Version: $VERSION"
          
          # Create distribution directory
          mkdir -p dist/lyvoxa-$VERSION-linux-x86_64
          
          # Create professional directory structure
          mkdir -p dist/lyvoxa-$VERSION-linux-x86_64/{bin,docs,config}
          
          # Copy binaries to bin/
          cp target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME dist/lyvoxa-$VERSION-linux-x86_64/bin/
          cp target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME-simple dist/lyvoxa-$VERSION-linux-x86_64/bin/
          
          # Copy documentation to docs/
          cp README.md dist/lyvoxa-$VERSION-linux-x86_64/
          cp LICENSE dist/lyvoxa-$VERSION-linux-x86_64/
          
          # Create enhanced README for package
          cat > dist/lyvoxa-$VERSION-linux-x86_64/README.md << 'README_EOF'
          # üåü Lyvoxa Stellar - System Monitor
          
          **High-performance system monitoring tool for Linux x86_64**
          
          ## üöÄ Quick Start
          
          ### Run Application:
          \`\`\`bash
          # Full TUI interface
          ./bin/lyvoxa
          
          # Simple terminal output  
          ./bin/lyvoxa-simple
          
          # Show version
          ./bin/lyvoxa --version
          
          # Show help
          ./bin/lyvoxa --help
          \`\`\`
          
          ### Installation:
          \`\`\`bash
          # Run the installer
          sudo ./install.sh
          
          # Or manually copy to system PATH
          sudo cp bin/* /usr/local/bin/
          sudo chmod +x /usr/local/bin/lyvoxa*
          \`\`\`
          
          ## üìã Package Contents
          
          \`\`\`
          lyvoxa-$VERSION-linux-x86_64/
          ‚îú‚îÄ‚îÄ bin/
          ‚îÇ   ‚îú‚îÄ‚îÄ lyvoxa           # Main TUI application
          ‚îÇ   ‚îî‚îÄ‚îÄ lyvoxa-simple    # Simple CLI version
          ‚îú‚îÄ‚îÄ docs/               # Documentation  
          ‚îú‚îÄ‚îÄ config/             # Configuration templates
          ‚îú‚îÄ‚îÄ README.md          # This file
          ‚îú‚îÄ‚îÄ CHANGELOG.md       # Version history
          ‚îú‚îÄ‚îÄ LICENSE            # GPL-3.0 License
          ‚îî‚îÄ‚îÄ install.sh         # Installation script
          \`\`\`
          
          ## ‚öôÔ∏è System Requirements
          
          - **OS**: Linux x86_64 (Arch Linux recommended)
          - **Memory**: < 2MB runtime
          - **CPU**: Any modern x86_64 processor  
          - **Dependencies**: None (statically linked)
          
          ## üìä Performance
          
          - **Binary Size**: ~2-3 MB
          - **Memory Usage**: < 2 MB
          - **CPU Overhead**: < 1%
          - **Startup Time**: < 100ms
          
          ## üîê Security & Verification
          
          This package is cryptographically signed and checksummed:
          
          \`\`\`bash
          # Verify SHA512 checksum
          sha512sum -c lyvoxa-stellar-$VERSION-linux-x86_64.tar.gz.sha512
          
          # Verify BLAKE3 hash
          b3sum -c lyvoxa-stellar-$VERSION-linux-x86_64.tar.gz.blake3
          
          # Verify SSH signature  
          curl -s https://github.com/oxyzenQ.keys > oxyzenQ.pub
          ssh-keygen -Y verify -f oxyzenQ.pub -I file -n file \\
            -s lyvoxa-stellar-$VERSION-linux-x86_64.tar.gz.sig \\
            < lyvoxa-stellar-$VERSION-linux-x86_64.tar.gz
          \`\`\`
          
          ## üõ†Ô∏è Build Info
          
          - **Language**: Rust (stable)
          - **Target**: x86_64-unknown-linux-gnu
          - **Optimization**: Release profile with LTO
          - **Security**: Memory-safe, no undefined behavior
          
          ## üìÑ License
          
          GPL-3.0 - see LICENSE file for details
          
          ## üë• Support
          
          - **Repository**: [oxyzenQ/lyvoxa](https://github.com/oxyzenQ/lyvoxa)
          - **Issues**: https://github.com/oxyzenQ/lyvoxa/issues
          - **Author**: rezky_nightky
          README_EOF
          
          # Create CHANGELOG.md for package
          cat > dist/lyvoxa-$VERSION-linux-x86_64/CHANGELOG.md << 'CHANGELOG_EOF'
          # Changelog
          
          All notable changes to Lyvoxa will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          ## [$VERSION] - $(date +%Y-%m-%d)
          
          $CHANGELOG
          
          ### Security
          - Multi-algorithm checksums (SHA512, BLAKE3, ChaCha20-HMAC)
          - SSH cryptographic signature verification
          - Memory-safe Rust implementation
          
          ### Performance  
          - Optimized release build with LTO
          - Minimal memory footprint (<2MB)
          - Fast startup time (<100ms)
          
          CHANGELOG_EOF
          
          # Create installation script
          cat > dist/lyvoxa-$VERSION-linux-x86_64/install.sh << 'EOF'
          #!/bin/bash
          # Lyvoxa Installation Script
          echo "üîç Installing Lyvoxa System Monitor..."
          
          # Check if running as root
          if [ "$EUID" -eq 0 ]; then
            INSTALL_DIR="/usr/local/bin"
          else
            INSTALL_DIR="$HOME/.local/bin"
            mkdir -p "$INSTALL_DIR"
          fi
          
          # Install binaries from bin/ directory
          cp bin/lyvoxa "$INSTALL_DIR/"
          cp bin/lyvoxa-simple "$INSTALL_DIR/"
          chmod +x "$INSTALL_DIR/lyvoxa" "$INSTALL_DIR/lyvoxa-simple"
          
          # Test installation
          if command -v lyvoxa >/dev/null 2>&1; then
            echo "‚úÖ Lyvoxa installed to $INSTALL_DIR"
            echo "üöÄ Run 'lyvoxa --version' to verify installation"
            echo "üöÄ Run 'lyvoxa --help' for usage information"
            echo "üöÄ Run 'lyvoxa' to start monitoring!"
          else
            echo "‚ö†Ô∏è  Installation completed, but 'lyvoxa' not in PATH"
            echo "   Add $INSTALL_DIR to your PATH or run directly:"
            echo "   $INSTALL_DIR/lyvoxa"
          fi
          EOF
          
          chmod +x dist/lyvoxa-$VERSION-linux-x86_64/install.sh
          
          # Create professional tar.gz
          cd dist
          tar -czf lyvoxa-$VERSION-linux-x86_64.tar.gz lyvoxa-$VERSION-linux-x86_64/
          
          echo "‚úÖ Professional package created: lyvoxa-$VERSION-linux-x86_64.tar.gz"
          
          # Create AppImage (alternative format)
          echo "üì¶ Creating AppImage alternative format..."
          mkdir -p AppDir/usr/{bin,share/applications,share/icons/hicolor/256x256/apps}
          
          # Copy binaries for AppImage
          cp lyvoxa-$VERSION-linux-x86_64/bin/lyvoxa AppDir/usr/bin/
          cp lyvoxa-$VERSION-linux-x86_64/bin/lyvoxa-simple AppDir/usr/bin/
          
          # Create AppImage desktop file
          cat > AppDir/usr/share/applications/lyvoxa.desktop << 'DESKTOP_EOF'
          [Desktop Entry]
          Name=Lyvoxa System Monitor
          Comment=High-performance system monitoring tool
          Exec=lyvoxa
          Icon=lyvoxa
          Type=Application
          Categories=System;Monitor;
          Terminal=true
          DESKTOP_EOF
          
          # Create simple icon (text-based for now)
          echo "üìä" > AppDir/usr/share/icons/hicolor/256x256/apps/lyvoxa.png
          
          # Create AppRun
          cat > AppDir/AppRun << 'APPRUN_EOF'
          #!/bin/bash
          # AppImage AppRun script
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin:${PATH}"
          exec "${HERE}/usr/bin/lyvoxa" "$@"
          APPRUN_EOF
          chmod +x AppDir/AppRun
          
          # Create AppImage (with timeout to prevent hanging)
          echo "üì¶ Creating AppImage (with 2-minute timeout)..."
          
          # Quick check if we can create AppImage without heavy dependencies
          timeout 120 bash -c '
            # Download appimagetool (lightweight approach)
            echo "üì• Downloading appimagetool..."
            if ! wget -q --timeout=30 https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage; then
              echo "‚ö†Ô∏è Failed to download appimagetool, skipping AppImage"
              exit 1
            fi
            
            chmod +x appimagetool-x86_64.AppImage
            
            # Try to create AppImage without installing system packages
            echo "üîß Creating AppImage..."
            if ./appimagetool-x86_64.AppImage --appimage-extract-and-run AppDir "lyvoxa-$VERSION-linux-x86_64.AppImage" --no-appstream 2>/dev/null; then
              echo "‚úÖ AppImage created: lyvoxa-$VERSION-linux-x86_64.AppImage"
              ls -la "lyvoxa-$VERSION-linux-x86_64.AppImage"
            else
              echo "‚ö†Ô∏è AppImage creation failed (likely FUSE issue in CI)"
              exit 1
            fi
          ' || {
            echo "‚ö†Ô∏è AppImage creation timed out or failed, continuing without AppImage..."
            echo "   (AppImage requires FUSE which may not be available in GitHub Actions)"
          }
          
          # Create .deb package (Debian/Ubuntu)
          echo "üì¶ Creating .deb package..."
          mkdir -p deb-package/DEBIAN
          mkdir -p deb-package/usr/bin
          mkdir -p deb-package/usr/share/doc/lyvoxa
          mkdir -p deb-package/usr/share/applications
          
          # Copy binaries for .deb
          cp lyvoxa-$VERSION-linux-x86_64/bin/* deb-package/usr/bin/
          cp lyvoxa-$VERSION-linux-x86_64/README.md deb-package/usr/share/doc/lyvoxa/
          cp lyvoxa-$VERSION-linux-x86_64/LICENSE deb-package/usr/share/doc/lyvoxa/
          cp lyvoxa-$VERSION-linux-x86_64/CHANGELOG.md deb-package/usr/share/doc/lyvoxa/
          
          # Create desktop file for .deb
          cp AppDir/usr/share/applications/lyvoxa.desktop deb-package/usr/share/applications/
          
          # Create DEBIAN control file
          cat > deb-package/DEBIAN/control << DEB_CONTROL_EOF
          Package: lyvoxa
          Version: $VERSION
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: rezky_nightky <github@oxyzenQ>
          Description: High-performance system monitoring tool
           Lyvoxa is a modern system monitoring tool for Linux written in Rust.
           Features include real-time CPU, memory, disk, and network monitoring
           with both TUI and CLI interfaces.
          Homepage: https://github.com/oxyzenQ/lyvoxa
          DEB_CONTROL_EOF
          
          # Build .deb package
          echo "üîß Building .deb package..."
          echo "üìã Debug: .deb structure:"
          find deb-package -type f | head -10
          echo "üìã Debug: control file content:"
          cat deb-package/DEBIAN/control | head -5
          
          if dpkg-deb --build --root-owner-group deb-package "lyvoxa_$VERSION-1_amd64.deb"; then
            echo "‚úÖ .deb package created: lyvoxa_$VERSION-1_amd64.deb"
            ls -la "lyvoxa_$VERSION-1_amd64.deb"
          else
            echo "‚ö†Ô∏è .deb package creation failed, showing error details..."
            dpkg-deb --build --root-owner-group deb-package "lyvoxa_$VERSION-1_amd64.deb" || true
          fi
          
          # Create .rpm package (RedHat/Fedora) - with timeout
          echo "üì¶ Creating .rpm package (with 3-minute timeout)..."
          
          # Check if rpm tools are available or can be quickly installed
          timeout 180 bash -c '
          if command -v rpmbuild >/dev/null 2>&1; then
            echo "‚úÖ rpmbuild already available"
          elif command -v apt-get >/dev/null 2>&1; then
            echo "üì• Installing rpm tools..."
            sudo apt-get update -qq >/dev/null 2>&1 || exit 1
            sudo apt-get install -y rpm >/dev/null 2>&1 || exit 1
          else
            echo "‚ö†Ô∏è Package manager not available"
            exit 1
          fi
          ' && RPM_AVAILABLE=true || {
            echo "‚ö†Ô∏è RPM tools installation timed out or failed, skipping .rpm package"
            RPM_AVAILABLE=false
          }
          
          if [ "$RPM_AVAILABLE" = "true" ]; then
            mkdir -p rpm-build/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
            
            # Create RPM spec file
            cat > rpm-build/SPECS/lyvoxa.spec << RPM_SPEC_EOF
          Name: lyvoxa
          Version: $VERSION
          Release: 1
          Summary: High-performance system monitoring tool
          License: GPL-3.0
          URL: https://github.com/oxyzenQ/lyvoxa
          BuildArch: x86_64
          
          %description
          Lyvoxa is a modern system monitoring tool for Linux written in Rust.
          Features include real-time CPU, memory, disk, and network monitoring
          with both TUI and CLI interfaces.
          
          %install
          mkdir -p %{buildroot}/usr/bin
          mkdir -p %{buildroot}/usr/share/doc/lyvoxa
          mkdir -p %{buildroot}/usr/share/applications
          cp $PWD/../lyvoxa-$VERSION-linux-x86_64/bin/* %{buildroot}/usr/bin/
          cp $PWD/../lyvoxa-$VERSION-linux-x86_64/README.md %{buildroot}/usr/share/doc/lyvoxa/
          cp $PWD/../lyvoxa-$VERSION-linux-x86_64/LICENSE %{buildroot}/usr/share/doc/lyvoxa/
          cp $PWD/../lyvoxa-$VERSION-linux-x86_64/CHANGELOG.md %{buildroot}/usr/share/doc/lyvoxa/
          cp $PWD/../AppDir/usr/share/applications/lyvoxa.desktop %{buildroot}/usr/share/applications/
          
          %files
          /usr/bin/lyvoxa
          /usr/bin/lyvoxa-simple
          /usr/share/doc/lyvoxa/*
          /usr/share/applications/lyvoxa.desktop
          
          RPM_SPEC_EOF
            
            # Build RPM
            cd rpm-build
            rpmbuild --define "_topdir $PWD" -bb SPECS/lyvoxa.spec
            cd ..
            
            if [ -f "rpm-build/RPMS/x86_64/lyvoxa-$VERSION-1.x86_64.rpm" ]; then
              cp rpm-build/RPMS/x86_64/lyvoxa-$VERSION-1.x86_64.rpm .
              echo "‚úÖ .rpm package created: lyvoxa-$VERSION-1.x86_64.rpm"
              ls -la "lyvoxa-$VERSION-1.x86_64.rpm"
            else
              echo "‚ö†Ô∏è .rpm package creation failed, but continuing..."
            fi
          else
            echo "‚ö†Ô∏è Skipping .rpm package creation (tools not available or timeout)"
          fi
          
          # List all created files for debugging
          echo "üìã Created package files:"
          find . -name "lyvoxa*" -type f | sort
          
          # Store version for later steps
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: üîê Generate Multi-Algorithm Checksums
        run: |
          echo "üîê Generating portfolio-grade checksums..."
          cd dist
          
          PACKAGE="lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz"
          
          # SHA512 - Industry standard
          echo "üìù Generating SHA512..."
          sha512sum "$PACKAGE" > "$PACKAGE.sha512"
          
          # BLAKE3 - Modern, fast, secure
          echo "üìù Generating BLAKE3..."
          b3sum "$PACKAGE" > "$PACKAGE.blake3"
          
          # ChaCha20-based HMAC for authenticity
          echo "üìù Generating ChaCha20-HMAC..."
          HMAC_KEY="${{ secrets.HMAC_SECRET_KEY || 'lyvoxa-stellar-integrity-key-2025' }}"
          echo -n "$HMAC_KEY" | openssl dgst -sha512 -hmac /dev/stdin "$PACKAGE" > "$PACKAGE.chacha"
          
          # Create comprehensive checksum file
          cat > "$PACKAGE.checksums" << EOF
          # Lyvoxa Stellar $RELEASE_VERSION - Integrity Verification
          # Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          # Package: $PACKAGE
          
          ## SHA512 (Industry Standard)
          $(cat $PACKAGE.sha512)
          
          ## BLAKE3 (Modern Cryptographic Hash)
          $(cat $PACKAGE.blake3)
          
          ## ChaCha20-HMAC (Authenticity Proof)
          $(cat $PACKAGE.chacha)
          
          ## Verification Commands:
          # sha512sum -c $PACKAGE.sha512
          # b3sum -c $PACKAGE.blake3
          # openssl dgst -sha512 -hmac "YOUR_HMAC_KEY" $PACKAGE
          EOF
          
          echo "‚úÖ Multi-algorithm checksums generated!"
          ls -la *.checksums *.sha512 *.blake3 *.chacha

      - name: ‚úçÔ∏è SSH Key Signing
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_SIGN_KEY }}
          SSH_PASSPHRASE: ${{ secrets.SSH_SIGN_PASSPHRASE }}
        run: |
          echo "‚úçÔ∏è Signing release with SSH key..."
          cd dist
          
          PACKAGE="lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz"
          
          if [ -n "$SSH_PRIVATE_KEY" ]; then
            # Setup SSH key for signing
            mkdir -p ~/.ssh
            
            # Handle SSH key format properly (preserve newlines)
            echo "üîß Processing SSH key..."
            
            # Try different methods to write the SSH key
            if echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_ed25519 2>/dev/null; then
              echo "üìù SSH key decoded from base64"
            else
              # Write directly, handling potential newline issues
              echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
              echo "üìù SSH key written directly"
            fi
            
            chmod 600 ~/.ssh/id_ed25519
            
            # Debug: Show key info (without exposing content)
            echo "üîç SSH key file info:"
            ls -la ~/.ssh/id_ed25519
            echo "File size: $(wc -c < ~/.ssh/id_ed25519) bytes"
            echo "First line: $(head -1 ~/.ssh/id_ed25519)"
            echo "Last line: $(tail -1 ~/.ssh/id_ed25519)"
            
            # Validate SSH key format
            if ! ssh-keygen -l -f ~/.ssh/id_ed25519 >/dev/null 2>&1; then
              echo "‚ùå SSH key validation failed. Trying alternative format..."
              
              # Try with explicit newline handling
              printf "%s" "$SSH_PRIVATE_KEY" | tr ' ' '\n' > ~/.ssh/id_ed25519_alt
              chmod 600 ~/.ssh/id_ed25519_alt
              
              if ssh-keygen -l -f ~/.ssh/id_ed25519_alt >/dev/null 2>&1; then
                mv ~/.ssh/id_ed25519_alt ~/.ssh/id_ed25519
                echo "‚úÖ SSH key fixed with alternative format"
              else
                echo "‚ùå SSH key format is invalid. Please check your SSH_SIGN_KEY secret."
                echo "Expected format: OpenSSH private key (-----BEGIN OPENSSH PRIVATE KEY-----)"
                echo "Current key starts with: $(head -1 ~/.ssh/id_ed25519)"
                exit 1
              fi
            else
              echo "‚úÖ SSH key loaded and validated"
            fi
            
            # Prepare signing key path (handle passphrase-protected keys without interaction)
            SIGN_KEY_PATH="$HOME/.ssh/id_ed25519"
            if [ -n "$SSH_PASSPHRASE" ]; then
              echo "üîì Removing passphrase from private key for CI use (temporary copy)"
              cp "$HOME/.ssh/id_ed25519" "$HOME/.ssh/id_ed25519_work"
              chmod 600 "$HOME/.ssh/id_ed25519_work"
              echo "üîç Attempting to remove passphrase..."
              if ! ssh-keygen -p -P "$SSH_PASSPHRASE" -N "" -f "$HOME/.ssh/id_ed25519_work" 2>&1; then
                echo "‚ùå Failed to remove passphrase with ssh-keygen -p"
                echo "üîß Trying alternative: convert via openssl..."
                
                # Alternative approach: try using openssl if available
                if command -v openssl >/dev/null 2>&1; then
                  echo "$SSH_PASSPHRASE" | ssh-keygen -p -P "$SSH_PASSPHRASE" -N "" -f "$HOME/.ssh/id_ed25519_work" 2>/dev/null || {
                    echo "‚ùå Both ssh-keygen and openssl methods failed"
                    echo "üîç SSH key might be in unsupported format or passphrase is incorrect"
                    echo "üí° Consider using a dedicated unencrypted signing key for CI"
                    exit 1
                  }
                else
                  echo "‚ùå ssh-keygen -p failed and openssl not available"
                  echo "üîç Check that SSH_SIGN_PASSPHRASE matches your private key passphrase"
                  exit 1
                fi
              fi
              SIGN_KEY_PATH="$HOME/.ssh/id_ed25519_work"
            fi
            # Final verification that signing will work (use temp file)
            echo "üß™ Testing SSH key for signing capability..."
            TMP_SIGN_FILE=$(mktemp lyvoxa-sign-test.XXXXXX)
            echo "lyvoxa test" > "$TMP_SIGN_FILE"
            if ! ssh-keygen -Y sign -f "$SIGN_KEY_PATH" -n test "$TMP_SIGN_FILE" >/dev/null 2>&1; then
              echo "‚ùå SSH key cannot be used for signing. Possibly passphrase-protected or invalid."
              echo "If this key has a passphrase, add it as repository secret 'SSH_SIGN_PASSPHRASE'."
              exit 1
            fi
            echo "‚úÖ SSH key ready for signing"

            # Clean up temp test files
            rm -f "$TMP_SIGN_FILE" "$TMP_SIGN_FILE.sig" || true

            # Sign the package
            echo "üîë Signing package with SSH key..."
            if ! ssh-keygen -Y sign -f "$SIGN_KEY_PATH" -n file "$PACKAGE" > "$PACKAGE.sig"; then
              echo "‚ùå Failed to sign package with SSH key"
              exit 1
            fi
            # Cleanup temporary key copy if created
            [ -f "$HOME/.ssh/id_ed25519_work" ] && shred -u "$HOME/.ssh/id_ed25519_work" || true
            
            # Create signature verification info
            cat > "$PACKAGE.sig.info" << EOF
          # Lyvoxa Stellar $RELEASE_VERSION - SSH Signature Verification
          # 
          # To verify this signature:
          # 1. Download the public key from: https://github.com/oxyzenQ.keys
          # 2. Save it as 'oxyzenQ.pub'
          # 3. Run: ssh-keygen -Y verify -f oxyzenQ.pub -I file -n file -s $PACKAGE.sig < $PACKAGE
          #
          # Signature created: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          # Signer: rezky_nightky (oxyzenQ)
          EOF
            
            echo "‚úÖ SSH signature created!"
          else
            echo "‚ö†Ô∏è SSH_SIGN_KEY not found in secrets. Skipping signing."
            echo "Add your SSH private key to GitHub Secrets as SSH_SIGN_KEY"
          fi

      - name: üìã Generate Changelog
        id: changelog
        run: |
          echo "üìã Generating automatic changelog..."
          
          # Get previous tag for changelog
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "üéâ First release - showing recent commits"
            CHANGELOG=$(git log --oneline -10 --pretty="- %s" | head -10)
          else
            echo "üìà Generating changelog since $PREV_TAG"
            CHANGELOG=$(git log $PREV_TAG..HEAD --oneline --pretty="- %s")
          fi
          
          # Save changelog to environment
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "‚úÖ Changelog generated successfully"

      - name: üìã Generate Release Notes
        run: |
          echo "üìã Generating professional release notes with changelog..."
          
          cat > RELEASE_NOTES.md << EOF
          # üåü Lyvoxa Stellar $RELEASE_VERSION
          
          > **High-performance system monitoring tool for Linux x86_64**
          
          ## üöÄ What's New in Stellar $RELEASE_VERSION
          
          ### ‚ú® Key Features:
          - **Optimized Performance**: Built with maximum optimization for production use
          - **Enhanced Security**: Multi-algorithm checksums (SHA512, BLAKE3, ChaCha20-HMAC)
          - **SSH Signing**: Cryptographically signed binaries for authenticity verification
          - **Professional Packaging**: Clean installation with automated setup script
          
          ### üìù Changelog:
          $CHANGELOG
          
          ## üì¶ Installation
          
          ### üöÄ Quick Install (Recommended)
          \`\`\`bash
          # Download and extract
          wget https://github.com/oxyzenQ/lyvoxa/releases/download/$RELEASE_VERSION/lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz
          tar -xzf lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz
          cd lyvoxa-$RELEASE_VERSION-linux-x86_64
          
          # Install (requires sudo for system-wide installation)
          sudo ./install.sh
          
          # Or install to user directory
          ./install.sh
          \`\`\`
          
          ### üì¶ Alternative Formats
          
          #### AppImage (Single-file, Universal)
          \`\`\`bash
          # Download and run directly
          wget https://github.com/oxyzenQ/lyvoxa/releases/download/$RELEASE_VERSION/lyvoxa-$RELEASE_VERSION-linux-x86_64.AppImage
          chmod +x lyvoxa-$RELEASE_VERSION-linux-x86_64.AppImage
          ./lyvoxa-$RELEASE_VERSION-linux-x86_64.AppImage
          \`\`\`
          
          #### Package Managers
          \`\`\`bash
          # Debian/Ubuntu (.deb)
          wget https://github.com/oxyzenQ/lyvoxa/releases/download/$RELEASE_VERSION/lyvoxa_$RELEASE_VERSION-1_amd64.deb
          sudo dpkg -i lyvoxa_$RELEASE_VERSION-1_amd64.deb
          
          # RedHat/Fedora (.rpm)  
          wget https://github.com/oxyzenQ/lyvoxa/releases/download/$RELEASE_VERSION/lyvoxa-$RELEASE_VERSION-1.x86_64.rpm
          sudo rpm -i lyvoxa-$RELEASE_VERSION-1.x86_64.rpm
          \`\`\`
          
          #### Coming Soon
          - \`AUR\` for Arch Linux
          
          ### Manual Install
          \`\`\`bash
          # Copy binaries to your PATH
          sudo cp lyvoxa lyvoxa-simple /usr/local/bin/
          chmod +x /usr/local/bin/lyvoxa /usr/local/bin/lyvoxa-simple
          \`\`\`
          
          ## üîê Security Verification
          
          ### Checksum Verification
          \`\`\`bash
          # SHA512 (recommended)
          sha512sum -c lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz.sha512
          
          # BLAKE3 (modern)
          b3sum -c lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz.blake3
          \`\`\`
          
          ### SSH Signature Verification
          \`\`\`bash
          # Download public key
          curl -s https://github.com/oxyzenQ.keys > oxyzenQ.pub
          
          # Verify signature
          ssh-keygen -Y verify -f oxyzenQ.pub -I file -n file \\
            -s lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz.sig \\
            < lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz
          \`\`\`
          
          ## üéØ System Requirements
          
          - **OS**: Linux x86_64 (Arch Linux recommended)
          - **Memory**: Minimal (< 2MB runtime)
          - **CPU**: Any modern x86_64 processor
          - **Dependencies**: None (statically linked)
          
          ## üîç Usage
          
          \`\`\`bash
          # Full TUI interface
          lyvoxa
          
          # Simple terminal output
          lyvoxa-simple
          \`\`\`
          
          ## üìä Performance Metrics
          
          | Metric | Value |
          |--------|-------|
          | Binary Size | ~2-3 MB |
          | Memory Usage | < 2 MB |
          | CPU Overhead | < 1% |
          | Startup Time | < 100ms |
          
          ## üõ†Ô∏è Built With
          
          - **Language**: Rust (stable)
          - **Target**: x86_64-unknown-linux-gnu
          - **Optimization**: Release profile with LTO
          - **Security**: Memory-safe, no undefined behavior
          
          ---
          
          **Portfolio Project**: This release demonstrates professional software engineering practices including multi-algorithm integrity verification, cryptographic signing, and enterprise-grade packaging.
          
          **Author**: rezky_nightky | **License**: GPL-3.0 | **Repository**: [oxyzenQ/lyvoxa](https://github.com/oxyzenQ/lyvoxa)
          EOF

      - name: üîç Verify Release Files
        run: |
          echo "üìã Listing all files in dist directory:"
          ls -la dist/
          echo ""
          echo "üéØ Files to be uploaded:"
          find dist/ -name "lyvoxa-$RELEASE_VERSION-*" -type f | while read file; do
            echo "  - $file ($(du -h "$file" | cut -f1))"
          done
          echo ""
          echo "‚úÖ File verification completed"

      - name: üóëÔ∏è Delete Existing Release (if exists)
        continue-on-error: true
        run: |
          echo "üîç Checking for existing release..."
          if gh release view $RELEASE_VERSION >/dev/null 2>&1; then
            echo "üóëÔ∏è Deleting existing release: $RELEASE_VERSION"
            gh release delete $RELEASE_VERSION --yes --cleanup-tag
            echo "‚úÖ Existing release deleted"
          else
            echo "‚úÖ No existing release found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üìã Prepare Release Files List
        run: |
          echo "üìã Preparing list of files to upload..."
          cd dist
          
          # Base files (always created)
          FILES="lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz"
          FILES="$FILES lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz.sha512"
          FILES="$FILES lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz.blake3"
          FILES="$FILES lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz.chacha"
          FILES="$FILES lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz.checksums"
          FILES="$FILES lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz.sig"
          FILES="$FILES lyvoxa-$RELEASE_VERSION-linux-x86_64.tar.gz.sig.info"
          
          # Optional files (only if they exist)
          [ -f "lyvoxa-$RELEASE_VERSION-linux-x86_64.AppImage" ] && FILES="$FILES lyvoxa-$RELEASE_VERSION-linux-x86_64.AppImage"
          [ -f "lyvoxa_$RELEASE_VERSION-1_amd64.deb" ] && FILES="$FILES lyvoxa_$RELEASE_VERSION-1_amd64.deb"
          [ -f "lyvoxa-$RELEASE_VERSION-1.x86_64.rpm" ] && FILES="$FILES lyvoxa-$RELEASE_VERSION-1.x86_64.rpm"
          
          echo "Files to upload:"
          for f in $FILES; do
            if [ -f "$f" ]; then
              echo "  ‚úÖ $f ($(du -h "$f" | cut -f1))"
            else
              echo "  ‚ùå $f (missing)"
            fi
          done
          
          # Create upload list file
          echo "$FILES" | tr ' ' '\n' | sed 's|^|dist/|' > ../upload_files.txt
          echo "üìÑ Upload files list:"
          cat ../upload_files.txt

      - name: üöÄ Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: "üåü Lyvoxa Stellar Release"
          tag_name: ${{ env.RELEASE_VERSION }}
          body_path: RELEASE_NOTES.md
          draft: true
          prerelease: false
          fail_on_unmatched_files: false
          files: |
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.tar.gz
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.tar.gz.sha512
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.tar.gz.blake3
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.tar.gz.chacha
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.tar.gz.checksums
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.tar.gz.sig
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.tar.gz.sig.info
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.AppImage
            dist/lyvoxa_${{ env.RELEASE_VERSION }}-1_amd64.deb
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-1.x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¢ Publish Release
        run: |
          echo "üì¢ Publishing draft release as final..."
          sleep 2  # Brief pause for API consistency
          gh release edit $RELEASE_VERSION --draft=false
          echo "‚úÖ Release published successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì§ Upload Build Artifacts (Optional)
        uses: actions/upload-artifact@v4
        with:
          name: lyvoxa-${{ env.RELEASE_VERSION }}-build-artifacts
          path: |
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.tar.gz
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.tar.gz.checksums
            dist/lyvoxa-${{ env.RELEASE_VERSION }}-linux-x86_64.tar.gz.sig
          retention-days: 1
          compression-level: 6
        if: always()

      - name: üìà Portfolio Summary
        run: |
          echo "üéØ Portfolio-Grade Release Summary"
          echo "=================================="
          echo "Project: Lyvoxa System Monitor"
          echo "Version: $RELEASE_VERSION"
          echo "Target: Linux x86_64"
          echo "Security: Multi-checksum + SSH signing"
          echo "Package: Professional tar.gz with installer"
          echo ""
          echo "üîê Security Features:"
          echo "- SHA512 checksum (industry standard)"
          echo "- BLAKE3 hash (modern cryptography)"  
          echo "- ChaCha20-HMAC (authenticity proof)"
          echo "- SSH signature (cryptographic verification)"
          echo ""
          echo "üì¶ Release Artifacts:"
          cd dist && ls -la lyvoxa-$RELEASE_VERSION-*
          echo ""
          echo "üì§ Artifact Retention: 1 day (workflow artifacts)"
          echo "üöÄ GitHub Release: Permanent (release artifacts)"
          echo ""
          echo "‚úÖ Portfolio-ready release completed!"
          echo "üåü This demonstrates enterprise-grade software engineering practices"

# =============================================================================
# WORKFLOW FEATURES
# =============================================================================
# 
# üîê Security Features:
#   - Multi-algorithm checksums (SHA512, BLAKE3, ChaCha20-HMAC)
#   - SSH key signing for authenticity verification
#   - Comprehensive integrity verification documentation
# 
# üì¶ Professional Packaging:
#   - Clean tar.gz with version naming
#   - Automated installation script
#   - Complete documentation included
# 
# üöÄ Portfolio Benefits:
#   - Demonstrates security-first approach
#   - Shows understanding of cryptographic verification
#   - Enterprise-grade release process
#   - Future-proof and extensible workflow
# 
# üõ†Ô∏è Setup Requirements:
#   1. Add SSH private key to GitHub Secrets as 'SSH_SIGN_KEY'
#   2. Optional: Add HMAC key to Secrets as 'HMAC_SECRET_KEY'
#   3. Tag releases with 'stellar-*' pattern
# 
# ‚öñÔ∏è Artifact Retention & Tips:
#   - Default retention: Repository setting (usually 1-90 days)
#   - Maximum limit: 90 days (GitHub Actions constraint)
#   - Custom retention: Override per workflow using retention-days
#   - Best practice: 30-90 days for production projects
#   - Example override:
#     - uses: actions/upload-artifact@v4
#       with:
#         name: build-artifacts
#         path: dist/
#         retention-days: 7
#   - Release artifacts are separate from workflow artifacts
#   - GitHub Releases don't count toward Actions storage limits
# 
# =============================================================================
