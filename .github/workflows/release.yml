# =============================================================================
# LYVOXA RELEASE PIPELINE
# =============================================================================
# Optimized release workflow with ordered CI checks
# Author: rezky_nightky
# Version: Stellar 3.0

name: üåü Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 3.0)"
        required: true

permissions:
  contents: write
  security-events: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: lyvoxa

jobs:
  # Step 1: CodeQL Security Analysis
  codeql:
    name: üîí CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v5
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - uses: github/codeql-action/analyze@v3

  # Step 2: Build & Test
  build-test:
    name: üîß Build & Test
    runs-on: ubuntu-latest
    needs: codeql
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      
      - name: Run Tests
        run: cargo test --target x86_64-unknown-linux-gnu
      
      - name: Build Release (Optimized)
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          ls -lh target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME

  # Step 3: Create Release
  release:
    name: üöÄ Release
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Build Optimized Binary
        run: |
          export RUSTFLAGS="-C opt-level=z -C lto=fat -C codegen-units=1 -C strip=symbols"
          cargo build --release --target x86_64-unknown-linux-gnu
          strip --strip-all target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME
          
          echo "üìä Binary size:"
          ls -lh target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME
          file target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME

      - name: Setup GPG (if available)
        if: ${{ secrets.GPG_PRIVATE_KEY != '' }}
        run: |
          echo "üîê Setting up GPG for signing..."
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
          echo "‚úÖ GPG key imported"
        continue-on-error: true

      - name: Create Package
        run: |
          # Get version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          VERSION=$(echo "$VERSION" | sed 's/^v//')
          ARTIFACT="$PROJECT_NAME-$VERSION-linux-amd64"
          
          # Create clean package structure
          mkdir -p $ARTIFACT/bin
          cp target/x86_64-unknown-linux-gnu/release/$PROJECT_NAME $ARTIFACT/bin/
          cp README.md LICENSE $ARTIFACT/
          cp docs/CHANGELOG.md $ARTIFACT/ 2>/dev/null || true
          
          # Create tarball
          tar -czf $ARTIFACT.tar.gz $ARTIFACT/
          
          # Generate SHA256 checksum
          sha256sum $ARTIFACT.tar.gz > $ARTIFACT.tar.gz.sha256
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV
          
          echo "‚úÖ Package: $ARTIFACT.tar.gz ($(du -h $ARTIFACT.tar.gz | cut -f1))"

      - name: Sign Package (GPG)
        if: ${{ secrets.GPG_PRIVATE_KEY != '' }}
        run: |
          echo "üîè Signing package with GPG..."
          
          # Sign with passphrase if provided
          if [ -n "${{ secrets.GPG_PASSPHRASE }}" ]; then
            echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 \
              --pinentry-mode loopback --armor --detach-sign $ARTIFACT.tar.gz
          else
            gpg --batch --yes --armor --detach-sign $ARTIFACT.tar.gz
          fi
          
          # Verify signature was created
          if [ -f "$ARTIFACT.tar.gz.asc" ]; then
            echo "‚úÖ Signature created: $ARTIFACT.tar.gz.asc"
            gpg --verify $ARTIFACT.tar.gz.asc $ARTIFACT.tar.gz
          else
            echo "‚ö†Ô∏è Signature file not created"
          fi
        continue-on-error: true

      - name: Generate Changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "## Changes" > CHANGELOG.txt
            git log --oneline --pretty="- %s (%h)" -20 >> CHANGELOG.txt
          else
            echo "## Changes since $PREV_TAG" > CHANGELOG.txt
            git log $PREV_TAG..HEAD --oneline --pretty="- %s (%h)" >> CHANGELOG.txt
          fi

      - name: Create Release Notes
        run: |
          cat > RELEASE_NOTES.md << EOF
          # Lyvoxa $VERSION

          **Linux x86_64 system monitoring tool**

          ## Installation

          \`\`\`bash
          wget https://github.com/oxyzenQ/lyvoxa/releases/download/$VERSION/$ARTIFACT.tar.gz
          wget https://github.com/oxyzenQ/lyvoxa/releases/download/$VERSION/$ARTIFACT.tar.gz.sha256
          sha256sum -c $ARTIFACT.tar.gz.sha256
          tar -xzf $ARTIFACT.tar.gz
          sudo cp $ARTIFACT/bin/* /usr/local/bin/
          \`\`\`

          ## What's Changed

          EOF
          cat CHANGELOG.txt >> RELEASE_NOTES.md
          
          cat >> RELEASE_NOTES.md << EOF

          ## Verification

          **SHA256 Checksum:**
          \`\`\`bash
          sha256sum -c $ARTIFACT.tar.gz.sha256
          \`\`\`

          **GPG Signature (if available):**
          \`\`\`bash
          # Import developer's public key (first time only)
          gpg --keyserver keys.openpgp.org --recv-keys <KEY_ID>
          
          # Verify signature
          gpg --verify $ARTIFACT.tar.gz.asc $ARTIFACT.tar.gz
          \`\`\`

          **Full Changelog**: https://github.com/oxyzenQ/lyvoxa/commits/$VERSION
          EOF

      - name: Prepare Release Files
        run: |
          echo "üìã Files to upload:"
          ls -lh $ARTIFACT.tar.gz*
          
          # Create file list
          echo "$ARTIFACT.tar.gz" > files.txt
          echo "$ARTIFACT.tar.gz.sha256" >> files.txt
          
          # Add signature if exists
          if [ -f "$ARTIFACT.tar.gz.asc" ]; then
            echo "$ARTIFACT.tar.gz.asc" >> files.txt
            echo "üîè GPG signature will be included"
          fi

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Lyvoxa ${{ env.VERSION }}"
          tag_name: ${{ env.VERSION }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            ${{ env.ARTIFACT }}.tar.gz
            ${{ env.ARTIFACT }}.tar.gz.sha256
            ${{ env.ARTIFACT }}.tar.gz.asc
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "‚úÖ Release $VERSION published"
          echo "üì¶ Package: $ARTIFACT.tar.gz"
          echo "üîê Checksum: $ARTIFACT.tar.gz.sha256"
          if [ -f "$ARTIFACT.tar.gz.asc" ]; then
            echo "üîè Signature: $ARTIFACT.tar.gz.asc"
          fi
          echo "üîó https://github.com/oxyzenQ/lyvoxa/releases/tag/$VERSION"
